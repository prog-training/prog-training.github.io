'use strict'
// https://dou.ua/lenta/articles/rest-conception/
// https://habrahabr.ru/post/265845/

var REST = 
[
	{	
		task : 
`1. Что такое REST? `,

		solution : 
`REST - Representational State Transfer
«передача/изменение состояния через представления»  — 
архитектурный стиль 
взаимодействия компонентов 
распределённого приложения в сети. 

Компоненты в REST взаимодействуют наподобие взаимодействия клиентов и серверов.

Вызов удалённой процедуры может представлять собой обычный HTTP-запрос (обычно «GET» или «POST»; такой запрос называют «REST-запрос»), 
а необходимые данные передаются в качестве параметров запроса.

Для веб-служб, построенных с учётом REST (то есть не нарушающих накладываемых им ограничений), применяют термин «RESTful».

В отличие от веб-сервисов (веб-служб) на основе SOAP, не существует «официального» стандарта для RESTful веб-API. 
Дело в том, что REST является архитектурным стилем, в то время как SOAP является протоколом. 
Несмотря на то, что REST не является стандартом сам по себе, 
большинство RESTful-реализаций используют стандарты, такие как HTTP, URL, JSON и XML.`
	},
	{	
		task : 
`2. Что значит следующий HTTP-код ответа сервера? 200`,

		solution : 
`OK`
	},
	{	
		task : 
`3. Что значит следующий HTTP-код ответа сервера? 300`,

		solution : 
`Multiple choice`
	},
	{	
		task : 
`4. Что значит следующий HTTP-код ответа сервера? 400`,

		solution : 
`Bad request`
	},
	{	
		task : 
`5. Что значит следующий HTTP-код ответа сервера? 404`,

		solution : 
`Not found`
	},
	{	
		task : 
`6. Что значит следующий HTTP-код ответа сервера? 500`,

		solution : 
`Server error`
	},
	{	
		task : 
`7. Что значит следующий HTTP-код ответа сервера? 501`,

		solution : 
`Not implemented`
	},
	{	
		task : 
`8. Из чего состоит одна транзакция RESTful API`,

		solution : 
`Метод запроса, например, GET
Путь запроса, например, /object/list

Тело запроса, например, форма

Код ответа, например, 200 ОК
Тело ответа, например, данные в формате JSON`
	},
	{	
		task : 
`9. что такое API?`,

		solution : 
`API - Application Programming Interface

 Интерфейс, который позволяет разработчикам использовать готовые блоки для построения приложения.

 API может отдавать данные в отличном от стандартного HTML формате ( XML или JSON ), благодаря чему им удобно пользоваться.`
	},
	{	
		task : 
`10. Шесть ограничений REST`,

		solution : 
`Единый интерфейс (Uniform Interface)

Отсутствие состояний (Stateless)

Кеширование ответа (Cacheable)

Клиент-сервер (Client-Server)

Многоуровневая система (Layered System)

"Код по требованию" (Code on Demand - опционально)`
	},
	{	
		task : 
`11. Особенность REST ?`,

		solution : 
`Особенность REST в том, что 
сервер не запоминает состояние пользователя между запросами - 


в каждом запросе передаётся :


- информация, идентифицирующая пользователя (например, token, полученный через OAuth-авторизацию) и 

- все параметры, необходимые для выполнения операции.`
	},
	{	
		task : 
`12. 4 операции REST?`,

		solution : 
`Всё взаимодействие с сервером сводится к 4 операциям 
(4 - это необходимый и достаточный минимум, в конкретной реализации типов операций может быть больше):

1. получение данных с сервера (обычно в формате JSON, или XML)
2. добавление новых данных на сервер
3. модификация существующих данных на сервере
4. удаление данных на сервере`
	},
	{	
		task : 
`13. Методы HTTP-запроса?`,

		solution : 
`1. получение - GET

2. добавление - POST

3. модификация - PUT

4. удаление - DELETE`
	},
	{	
		task : 
`14. Идея REST?`,

		solution : 
`Рой Филдинг предложил использовать Web не только для общения между человеком и машиной, но и для общения между машинами.`
	},
	{	
		task : 
`15. Что такое состояние в REST?`,

		solution : 
`Ключевое понятие в REST — это ресурс. 
Ресурс имеет состояние, и мы можем его получать или изменять при помощи представлений.
Наше приложение отвечает за некоторое множество таких ресурсов. 

Кстати, совокупное состояние ресурсов — это и есть состояние приложения.`
	},
	{	
		task : 
`16. Что такое представление в REST?`,

		solution : 
`Под представлением можно понимать JSON/HTML/XML/текст в определенном формате или 

что угодно, что позволяет нам понимать состояние ресурса или его модифицировать. 

Достаточно помнить, что REST - это про общение между машинами.


Представление, которое модифицирует состояние ресурса, 
и представление, которое что-то говорит нам о состоянии, 
не обязательно должны друг другу соответствовать.`
	},
	{	
		task : 
`17. Что такое URI?`,

		solution : 
`URI придуманы чтобы идентифицировать ресурсы.

Об URI лучше всего думать как об имени или псевдониме ресурса.
 U — это unified, а не unique. 
Имен у одного и того же ресурса может быть много. 
Главное, чтобы они были понятными для машин. 
Например, «bank.account.1» и «bank.accs.first» могут быть вполне реальными идентификаторами в определенной системе.

URI - унифицированный (единообразный) идентификатор ресурса.

URL — это самый известный стандарт для идентификации ресурсов в интернете. 
URL — это частный случай URI, конкретная реализация.`
	},
	{	
		task : 
`18. ?`,

		solution : 
`URL - Uniform Resource Locator — 
единообразный локатор (определитель местонахождения) ресурса. 

URL служит стандартизированным способом записи адреса ресурса в сети Интернет.`
	},
	{	
		task : 
`19. Что такое HATEOAS?`,

		solution : 
`Что такое - Hypermedia as the Engine of Application State.

Это одно из ключевых понятий REST, которое действительно отличает REST от других сетевых архитектур.

Самое важное здесь, что клиент знает только одну точку входа, только один URL. 
А дальше он получает представления и видит набор возможных действия, и он может принимать уже соответствующие решения. 
Это в разы может упростить клиент, так как ему не нужно хранить логики, а он может полностью опираться на ссылки. `
	},
	{	
		task : 
`20. ?`,

		solution : 
``
	}


]